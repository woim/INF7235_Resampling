#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'resampling'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/resampling` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/resampling now"
  exit 64
end

include GLI::App

program_desc 'Program to resample 2D images with rigid transformation'

version Resampling::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Select input image file (must be png file)'
arg_name 'filename'
flag [:i,:input]

desc 'Output the resampling process into file (must be png file)'
arg_name 'filename'
flag [:o,:output]

desc 'Rotation of the rigid transform'
default_value '0'
arg_name 'rotation'
flag [:r,:rotation]

desc 'Translation of the rigid transform'
default_value '0,0'
arg_name 'translation'
flag [:t,:translation], :type => Array

desc 'Describe sequential here'
arg_name 'Describe arguments to sequential here'
command :sequential do |c|
  c.action do |global_options,options,args|

    rotation = global_options[:rotation].to_f
    translation = global_options[:translation].map { |e| e.to_f }

    resampler = Resampler.create do |r|
        r.source_filename = global_options[:input]
        r.image_source = Image.new
        r.image_destination = Image.new
        r.transform = Transform.new(rotation,translation)
    end

    resampler.process
    resampler.image_destination.save(global_options[:output])

  end
end

desc 'Describe parallel_loop here'
arg_name 'Describe arguments to parallel_loop here'
command :parallel_loop do |c|
  c.action do |global_options,options,args|

    rotation = global_options[:rotation].to_f
    translation = global_options[:translation].map { |e| e.to_f }

    resampler = Resampler.create do |r|
        r.source_filename = global_options[:input]
        r.image_source = Image.new
        r.image_destination = Image.new
        r.transform = Transform.new(rotation,translation)
    end

    resampler.process_loop
    resampler.image_destination.save(global_options[:output])

  end
end

desc 'Describe parallel_data here'
arg_name 'Describe arguments to parallel_data here'
command :parallel_data do |c|
  c.action do |global_options,options,args|
    puts "parallel_data command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
